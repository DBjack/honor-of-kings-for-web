* {
    // 如果宽度过多，内容向内挤压
    box-sizing: border-box;
    outline: none;
}

html {
    font-size: 13px;
}

body {
    margin: 0;
    font-family: Arial, Helvetica, sans-serif;
    line-height: 1.2em;
    background-color: #f1f1f1;
}

a {
    color: #999;
}

//colors
$colors: ( "primary": "#db9e3f", "white": #fff, "light": #f9f9f9, "black": #000, "dark": #222, "dark-1": #343434, "green": #999, );
// text-color
@each $colorKey,
$color in $colors {
    .text-#{$colorKey} {
        color: $color;
    }
    .bg-#{$colorKey} {
        color: $color;
    }
}

// text
@each $var in (left, center, rigth) {
    .text-#{$var} {
        text-align: $var;
    }
}

// font-size
$base-font-size: 1rem;
$font-sizes: ( xs: 0.7692, sm: 0.9231, md: 1, lg: 1.0769, xl: 1.2308, );
@each $sizeKey,
$size in $font-sizes {
    .fs-#{$sizeKey} {
        font-size: $size * $base-font-size;
    }
}

.d-flex {
    display: flex;
}

.flex-column {
    flex-direction: column;
}

// 左边是固定的宽度，右边的内容会拉满
.flex-1 {
    flex: 1;
}

.flex-grow-1 {
    flex-grow: 1;
}

$flex-jc: ( start: flex-start, end: flex-end, center: center, around: space-around, between: space-between, );
@each $key,
$value in $flex-jc {
    .jc-#{$key} {
        justify-content: $value;
    }
}

// align-item:strecth  交叉轴上边等高
$flex-ai: ( start: flex-start, end: flex-end, center: center, stretch: strecth, );
@each $key,
$value in $flex-ai {
    .ai-#{$key} {
        align-items: $value;
    }
}

// spacing
//mt-1
$spacing-types: ( m: margin, p: padding, );
$spacing-directions: ( t: top, r: right, b: bottom, l: left, );
$spacing-sizes: ( 0: 0, 1: 0.25, 2: 0.5, 3: 1, 4: 1.5, 5: 3, );
$spacing-base-size: 1rem;
//mt-1
@each $typeKey,
$type in $spacing-types {
    @each $directionKey,
    $direction in $spacing-directions {
        @each $sizeKey,
        $size in $spacing-sizes {
            .#{$typeKey}#{$directionKey}-#{$sizeKey} {
                #{$type}-#{$direction}: $size * $spacing-base-size;
            }
        }
    }
}

//m-1
@each $typeKey,
$type in $spacing-types {
    @each $sizeKey,
    $size in $spacing-sizes {
        .#{$typeKey}-#{$sizeKey} {
            #{$type}: $size * $spacing-base-size;
        }
    }
}

//mx-1
@each $typeKey,
$type in $spacing-types {
    @each $sizeKey,
    $size in $spacing-sizes {
        .#{$typeKey}x-#{$sizeKey} {
            #{$type}-left: $size * $spacing-base-size;
            #{$type}-right: $size * $spacing-base-size;
        }
        .#{$typeKey}y-#{$sizeKey} {
            #{$type}-top: $size * $spacing-base-size;
            #{$type}-bottom: $size * $spacing-base-size;
        }
    }
}